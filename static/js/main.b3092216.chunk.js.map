{"version":3,"sources":["types/user.ts","store/acrionCreators/user.ts","types/todo.ts","store/acrionCreators/todo.ts","store/acrionCreators/index.ts","hooks/useActions.ts","hooks/useTypeSelector.ts","components/TodoList.tsx","components/UserList.tsx","App.tsx","store/reducers/todoReducer.ts","store/reducers/userReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["UserActionTypes","TodoActionType","fetchUsers","dispatch","a","type","FETCH_USERS","axios","get","response","FETCH_USERS_SUCCESS","payload","data","FETCH_USERS_ERROR","fetchTodos","page","limit","FETCH_TODOS","params","_page","_limit","FETCH_TODOS_SUCCESS","FETCH_TODOS_ERROR","setTodoPage","SET_TODO_PAGE","UserActionCreators","TodoActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","useTypeSelector","useSelector","TodoList","state","todo","loading","error","todos","useEffect","map","id","title","className","style","display","p","onClick","border","padding","UserList","user","users","name","App","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3092216.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nexport interface UserState {\r\n  users: any[];\r\n  loading: boolean;\r\n  error: null | string;\r\n}\r\nexport enum UserActionTypes {\r\n  FETCH_USERS = 'FETCH_USERS',\r\n  FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS',\r\n  FETCH_USERS_ERROR = 'FETCH_USERS_ERROR',\r\n}\r\n\r\ninterface FetchUserAction {\r\n  type: UserActionTypes.FETCH_USERS;\r\n}\r\ninterface FetchUserSuccessAction {\r\n  type: UserActionTypes.FETCH_USERS_SUCCESS;\r\n  payload: any[];\r\n}\r\ninterface FetchUserErrorAction {\r\n  type: UserActionTypes.FETCH_USERS_ERROR;\r\n  payload: string;\r\n}\r\nexport type UserAction = FetchUserAction | FetchUserSuccessAction | FetchUserErrorAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { UserAction, UserActionTypes } from '../../types/user';\r\n\r\nexport const fetchUsers = () => async (dispatch: Dispatch<UserAction>): Promise<void> => {\r\n  try {\r\n    dispatch({ type: UserActionTypes.FETCH_USERS });\r\n    const response = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n    dispatch({ type: UserActionTypes.FETCH_USERS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: UserActionTypes.FETCH_USERS_ERROR, payload: \"Error. Users info don't load\" });\r\n  }\r\n};\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nexport interface TodoState {\r\n  todos: any[];\r\n  loading: boolean;\r\n  error: null | string;\r\n  page: number;\r\n  limit: number;\r\n}\r\n\r\nexport enum TodoActionType {\r\n  FETCH_TODOS = 'FETCH_TODOS',\r\n  FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS',\r\n  FETCH_TODOS_ERROR = 'FETCH_TODOS_ERROR',\r\n  SET_TODO_PAGE = 'SET_TODO_PAGE',\r\n}\r\n\r\ninterface FetchTodoAction {\r\n  type: TodoActionType.FETCH_TODOS;\r\n}\r\n\r\ninterface FetchTodoSuccessAction {\r\n  type: TodoActionType.FETCH_TODOS_SUCCESS;\r\n  payload: any[];\r\n}\r\n\r\ninterface FetchTodoErrorAction {\r\n  type: TodoActionType.FETCH_TODOS_ERROR;\r\n  payload: string;\r\n}\r\n\r\ninterface SetTodoPageAction {\r\n  type: TodoActionType.SET_TODO_PAGE;\r\n  payload: number;\r\n}\r\n\r\nexport type TodoAction = FetchTodoAction | FetchTodoSuccessAction | FetchTodoErrorAction | SetTodoPageAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { TodoAction, TodoActionType } from '../../types/todo';\r\n\r\nexport const fetchTodos = (page = 1, limit = 10) => async (dispatch: Dispatch<TodoAction>): Promise<void> => {\r\n  try {\r\n    dispatch({ type: TodoActionType.FETCH_TODOS });\r\n    const response = await axios.get('https://jsonplaceholder.typicode.com/todos', {\r\n      params: { _page: page, _limit: limit },\r\n    });\r\n    dispatch({ type: TodoActionType.FETCH_TODOS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: TodoActionType.FETCH_TODOS_ERROR, payload: \"Error. Todos info don't load\" });\r\n  }\r\n};\r\n\r\nexport function setTodoPage(page: number): TodoAction {\r\n  return { type: TodoActionType.SET_TODO_PAGE, payload: page };\r\n}\r\n","import * as UserActionCreators from './user';\r\nimport * as TodoActionCreators from './todo';\r\n\r\nexport default {\r\n  ...UserActionCreators,\r\n  ...TodoActionCreators,\r\n};\r\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport ActionCreators from '../store/acrionCreators';\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch();\r\n  return bindActionCreators(ActionCreators, dispatch);\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/reducers';\r\n\r\nexport const useTypeSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React, { useEffect } from 'react';\r\nimport { useActions } from '../hooks/useActions';\r\nimport { useTypeSelector } from '../hooks/useTypeSelector';\r\nimport { TodoAction } from '../types/todo';\r\n\r\nconst TodoList: React.FC = () => {\r\n  const { page, loading, error, limit, todos } = useTypeSelector((state) => state.todo);\r\n  const { fetchTodos, setTodoPage } = useActions();\r\n  const pages = [1, 2, 3, 4, 5];\r\n  useEffect(() => {\r\n    fetchTodos(page, limit);\r\n  }, [page]);\r\n\r\n  if (loading) {\r\n    return <h1>Loading...</h1>;\r\n  }\r\n\r\n  if (error) {\r\n    return <h1>{error}</h1>;\r\n  }\r\n  return (\r\n    <div>\r\n      <h2>Todos</h2>\r\n      {todos.map((todo) => (\r\n        <div key={todo.id}>\r\n          {todo.id}-{todo.title}\r\n        </div>\r\n      ))}\r\n      <div className=\"mt-2\" style={{ display: 'flex' }}>\r\n        {pages.map((p) => (\r\n          <div\r\n            onClick={(): TodoAction => setTodoPage(p)}\r\n            style={{ border: p === page ? '2px solid green' : '1px solid gray', padding: 10 }}\r\n          >\r\n            {p}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","/* eslint-disable @typescript-eslint/no-shadow */\r\nimport React, { useEffect } from 'react';\r\nimport { useActions } from '../hooks/useActions';\r\nimport { useTypeSelector } from '../hooks/useTypeSelector';\r\n\r\nconst UserList: React.FC = () => {\r\n  const { users, error, loading } = useTypeSelector((state) => state.user);\r\n  const { fetchUsers } = useActions();\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, []);\r\n  if (loading) {\r\n    return <h1>Loading...</h1>;\r\n  }\r\n\r\n  if (error) {\r\n    return <h1>{error}</h1>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Users</h1>\r\n      {users.map((user) => (\r\n        <div key={user.id}>{user.name}</div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import React from 'react';\r\nimport TodoList from './components/TodoList';\r\nimport UserList from './components/UserList';\r\n\r\nconst App: React.FC = () => (\r\n  <div className=\"container pt-3 \">\r\n    <UserList />\r\n    <hr />\r\n    <TodoList />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import { TodoAction, TodoActionType, TodoState } from '../../types/todo';\r\n\r\nconst initialState: TodoState = {\r\n  todos: [],\r\n  page: 1,\r\n  error: null,\r\n  limit: 10,\r\n  loading: false,\r\n};\r\n\r\nexport const todoReducer = (state = initialState, action: TodoAction): TodoState => {\r\n  switch (action.type) {\r\n    case TodoActionType.FETCH_TODOS:\r\n      return { ...state, loading: true };\r\n    case TodoActionType.FETCH_TODOS_SUCCESS:\r\n      return { ...state, loading: false, todos: action.payload };\r\n    case TodoActionType.FETCH_TODOS_ERROR:\r\n      return { ...state, loading: false, error: action.payload };\r\n    case TodoActionType.SET_TODO_PAGE:\r\n      return { ...state, page: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { UserAction, UserActionTypes, UserState } from '../../types/user';\r\n\r\nconst initialState: UserState = {\r\n  users: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const userReducer = (state = initialState, action: UserAction): UserState => {\r\n  switch (action.type) {\r\n    case UserActionTypes.FETCH_USERS:\r\n      return { loading: true, error: null, users: [] };\r\n    case UserActionTypes.FETCH_USERS_SUCCESS:\r\n      return { loading: false, error: null, users: action.payload };\r\n    case UserActionTypes.FETCH_USERS_ERROR:\r\n      return { loading: false, error: action.payload, users: [] };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { todoReducer } from './todoReducer';\r\nimport { userReducer } from './userReducer';\r\n\r\nexport const rootReducer = combineReducers({ user: userReducer, todo: todoReducer });\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './reducers';\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { store } from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}